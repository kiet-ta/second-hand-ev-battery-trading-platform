import React, { useEffect, useState } from "react";
import { Table, Tag, Button, Dropdown, Menu, Spin, message, Select, Space, Input } from "antd";
import { MoreHorizontal, UserCheck, Ban, AlertTriangle, Search, Download } from "lucide-react";
import { managerAPI } from "../../hooks/managerApi";

const { Option } = Select;

export default function UserContent() {
    const [users, setUsers] = useState([]);
    const [filteredUsers, setFilteredUsers] = useState([]);
    const [loading, setLoading] = useState(true);
    const [page, setPage] = useState(1);
    const [totalPages, setTotalPages] = useState(1);
    const [roleFilter, setRoleFilter] = useState("all");
    const [statusFilter, setStatusFilter] = useState("all");
    const [searchQuery, setSearchQuery] = useState("");

    const currentUserId = parseInt(localStorage.getItem("userId"));

    // üì• T·∫£i danh s√°ch ng∆∞·ªùi d√πng
    const fetchUsers = async (pageNum = 1) => {
        try {
            setLoading(true);
            const data = await managerAPI.getUsersPaginated(pageNum, 20);
            setUsers(data.items || []);
            setTotalPages(data.totalPages || 1);
        } catch (error) {
            console.error("‚ùå L·ªói t·∫£i user:", error);
            message.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch ng∆∞·ªùi d√πng");
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchUsers(page);
    }, [page]);

    // üéØ √Åp d·ª•ng l·ªçc & t√¨m ki·∫øm
    useEffect(() => {
        let filtered = [...users];

        if (roleFilter !== "all") filtered = filtered.filter((u) => u.role === roleFilter);
        if (statusFilter !== "all") filtered = filtered.filter((u) => u.accountStatus === statusFilter);
        if (searchQuery.trim() !== "") {
            const q = searchQuery.toLowerCase();
            filtered = filtered.filter(
                (u) =>
                    u.fullName.toLowerCase().includes(q) ||
                    (u.email && u.email.toLowerCase().includes(q))
            );
        }

        setFilteredUsers(filtered);
    }, [users, roleFilter, statusFilter, searchQuery]);

    // ‚öôÔ∏è C·∫≠p nh·∫≠t tr·∫°ng th√°i ng∆∞·ªùi d√πng
    const handleStatusChange = async (userId, status) => {
        if (userId === currentUserId) {
            message.warning("‚ö†Ô∏è B·∫°n kh√¥ng th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i c·ªßa ch√≠nh m√¨nh");
            return;
        }
        try {
            await managerAPI.updateUserStatus(userId, status);
            await fetchUsers(page);
            message.success("‚úÖ Tr·∫°ng th√°i ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!");
        } catch (err) {
            console.error("L·ªói c·∫≠p nh·∫≠t:", err);
            message.error("‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i");
        }
    };

    // üì§ Xu·∫•t CSV
    const exportToCSV = () => {
        if (filteredUsers.length === 0) {
            message.info("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t.");
            return;
        }

        const headers = ["ID", "H·ªç v√† t√™n", "Email", "S·ªë ƒëi·ªán tho·∫°i", "Vai tr√≤", "Tr·∫°ng th√°i"];
        const rows = filteredUsers.map((u) => [
            u.userId,
            u.fullName,
            u.email,
            u.phone,
            u.role,
            u.accountStatus,
        ]);

        const csvContent =
            "data:text/csv;charset=utf-8," +
            [headers.join(","), ...rows.map((r) => r.join(","))].join("\n");

        const encodedUri = encodeURI(csvContent);
        const link = document.createElement("a");
        link.setAttribute("href", encodedUri);
        link.setAttribute("download", `users_export_${new Date().toISOString().slice(0, 10)}.csv`);
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };

    const columns = [
        {
            title: "ID",
            dataIndex: "userId",
            key: "userId",
            width: 80,
            align: "center",
        },
        {
            title: "H·ªç v√† t√™n",
            dataIndex: "fullName",
            key: "fullName",
            render: (text) => <span className="font-medium">{text}</span>,
        },
        {
            title: "Email",
            dataIndex: "email",
            key: "email",
        },
        {
            title: "S·ªë ƒëi·ªán tho·∫°i",
            dataIndex: "phone",
            key: "phone",
            width: 150,
        },
        {
            title: "Vai tr√≤",
            dataIndex: "role",
            key: "role",
            render: (role) => {
                const color =
                    role === "buyer"
                        ? "blue"
                        : role === "seller"
                            ? "green"
                            : role === "staff"
                                ? "orange"
                                : "purple";
                return <Tag color={color}>{role.toUpperCase()}</Tag>;
            },
        },
        {
            title: "Tr·∫°ng th√°i",
            dataIndex: "accountStatus",
            key: "accountStatus",
            render: (status) => {
                const map = {
                    active: { color: "green", text: "ƒêang ho·∫°t ƒë·ªông" },
                    warning1: { color: "orange", text: "C·∫£nh c√°o 1" },
                    warning2: { color: "volcano", text: "C·∫£nh c√°o 2" },
                    ban: { color: "red", text: "B·ªã c·∫•m" },
                };
                const info = map[status] || { color: "default", text: status };
                return <Tag color={info.color}>{info.text}</Tag>;
            },
        },
        {
            title: "H√†nh ƒë·ªông",
            key: "actions",
            align: "center",
            render: (_, record) => {
                if (record.userId === currentUserId)
                    return <Tag color="default">Ch√≠nh b·∫°n</Tag>;

                const menu = (
                    <Menu
                        onClick={({ key }) => handleStatusChange(record.userId, key)}
                        items={[
                            {
                                key: "warning1",
                                label: (
                                    <div className="flex items-center gap-2 text-orange-500">
                                        <AlertTriangle size={16} />
                                        C·∫£nh c√°o
                                    </div>
                                ),
                            },
                            {
                                key: "ban",
                                label: (
                                    <div className="flex items-center gap-2 text-red-500">
                                        <Ban size={16} />
                                        C·∫•m t√†i kho·∫£n
                                    </div>
                                ),
                            },
                            {
                                key: "active",
                                label: (
                                    <div className="flex items-center gap-2 text-green-600">
                                        <UserCheck size={16} />
                                        K√≠ch ho·∫°t l·∫°i
                                    </div>
                                ),
                            },
                        ]}
                    />
                );

                return (
                    <Dropdown overlay={menu} trigger={["click"]}>
                        <Button type="text" icon={<MoreHorizontal size={18} />} />
                    </Dropdown>
                );
            },
        },
    ];

    return (
        <div className="bg-white p-4 rounded-xl shadow-sm">
            {/* B·ªô l·ªçc + t√¨m ki·∫øm */}
            <div className="flex justify-between items-center mb-4 flex-wrap gap-3">
                <h2 className="text-xl font-semibold">üë• Danh s√°ch ng∆∞·ªùi d√πng</h2>

                <Space wrap>
                    <Input
                        prefix={<Search size={16} className="text-slate-400" />}
                        placeholder="T√¨m theo t√™n ho·∫∑c email..."
                        value={searchQuery}
                        onChange={(e) => setSearchQuery(e.target.value)}
                        allowClear
                        style={{ width: 220 }}
                    />

                    <Select value={roleFilter} onChange={setRoleFilter} style={{ width: 160 }}>
                        <Option value="all">T·∫•t c·∫£ vai tr√≤</Option>
                        <Option value="buyer">Ng∆∞·ªùi mua</Option>
                        <Option value="seller">Ng∆∞·ªùi b√°n</Option>
                        <Option value="staff">Nh√¢n vi√™n</Option>
                        <Option value="manager">Qu·∫£n l√Ω</Option>
                    </Select>

                    <Select value={statusFilter} onChange={setStatusFilter} style={{ width: 180 }}>
                        <Option value="all">T·∫•t c·∫£ tr·∫°ng th√°i</Option>
                        <Option value="active">ƒêang ho·∫°t ƒë·ªông</Option>
                        <Option value="warning1">C·∫£nh c√°o 1</Option>
                        <Option value="warning2">C·∫£nh c√°o 2</Option>
                        <Option value="ban">B·ªã c·∫•m</Option>
                    </Select>

                    <Button
                        type="default"
                        icon={<Download size={16} />}
                        onClick={exportToCSV}
                    >
                        Xu·∫•t CSV
                    </Button>
                </Space>
            </div>

            {/* ƒê·∫øm s·ªë l∆∞·ª£ng k·∫øt qu·∫£ */}
            <div className="text-sm text-slate-600 mb-3">
                Hi·ªÉn th·ªã <b>{filteredUsers.length}</b> ng∆∞·ªùi d√πng
                {roleFilter !== "all" && ` (vai tr√≤: ${roleFilter})`}
                {statusFilter !== "all" && `, tr·∫°ng th√°i: ${statusFilter}`}
                {searchQuery && `, t√¨m ki·∫øm: ‚Äú${searchQuery}‚Äù`}
            </div>

            {loading ? (
                <div className="flex justify-center items-center h-[50vh]">
                    <Spin size="large" />
                </div>
            ) : (
                <Table
                    rowKey="userId"
                    columns={columns}
                    dataSource={filteredUsers}
                    pagination={{
                        current: page,
                        total: totalPages * 20,
                        pageSize: 20,
                        onChange: (p) => setPage(p),
                    }}
                    bordered
                    scroll={{ x: true }}
                />
            )}
        </div>
    );
}
