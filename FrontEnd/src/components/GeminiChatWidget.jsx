import { useState, useEffect, useRef, FormEvent } from "react";
import { GoogleGenAI } from "@google/genai";
import { MessageSquare, X, Send } from "lucide-react";

export default function GeminiChatWidget() {
    const [chat, setChat] = useState(null);
    const [messages, setMessages] = useState([
        {
            role: "model",
            text: "üëã Xin ch√†o! M√¨nh l√† tr·ª£ l√Ω AI c·ªßa n·ªÅn t·∫£ng **CocMuaXe** ‚Äî n∆°i b·∫°n c√≥ th·ªÉ mua, b√°n, ho·∫∑c ƒë·∫•u gi√° xe ƒëi·ªán v√† pin c≈©. M√¨nh c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?",
        },
    ]);
    const [userInput, setUserInput] = useState("");
    const [isOpen, setIsOpen] = useState(false);
    const [isLoading, setIsLoading] = useState(false);
    const chatWindowRef = useRef(null);

    useEffect(() => {
        const apiKey = import.meta.env.VITE_GEMINI_API_KEY;
        if (!apiKey) {
            console.error("‚ùå Ch∆∞a c·∫•u h√¨nh API Key Gemini");
            setMessages([{ role: "model", text: "L·ªói: B·∫°n ch∆∞a c·∫•u h√¨nh API key Gemini." }]);
            return;
        }

        const ai = new GoogleGenAI({ apiKey });
        const chatSession = ai.chats.create({
            model: "gemini-2.0-flash",
            config: {
                systemInstruction: `
                    B·∫°n l√† tr·ª£ l√Ω AI th√¢n thi·ªán cho n·ªÅn t·∫£ng **EV & Battery Trading Platform (CocMuaXe)**.
                    Nhi·ªám v·ª• c·ªßa b·∫°n l√† gi√∫p ng∆∞·ªùi d√πng:
                    - T√¨m hi·ªÉu th√¥ng tin v·ªÅ xe ƒëi·ªán, pin, v√† quy tr√¨nh mua b√°n ho·∫∑c ƒë·∫•u gi√°.
                    - H∆∞·ªõng d·∫´n thao t√°c tr√™n website (ƒëƒÉng xe, tham gia ƒë·∫•u gi√°, xem ƒë∆°n h√†ng, v.v.).
                    - Gi·∫£i th√≠ch r√µ r√†ng, d·ªÖ hi·ªÉu, ng·∫Øn g·ªçn, lu√¥n b·∫±ng **ti·∫øng Vi·ªát**.

                    üí¨ Phong c√°ch:
                    - X∆∞ng h√¥ ‚Äúm√¨nh ‚Äì b·∫°n‚Äù cho th√¢n thi·ªán.
                    - Lu√¥n n√≥i gi·ªçng t·ª± nhi√™n, t√≠ch c·ª±c, kh√¥ng qu√° d√†i d√≤ng.
                    - N·∫øu kh√¥ng bi·∫øt c√¢u tr·∫£ l·ªùi, h√£y n√≥i: ‚ÄúXin l·ªói, m√¨nh ch∆∞a c√≥ th√¥ng tin ƒë√≥.‚Äù

                    ‚öôÔ∏è ·ª®ng x·ª≠ m·∫´u:
                    - Khi ng∆∞·ªùi d√πng h·ªèi ‚Äúb·∫°n l√† ai?‚Äù ‚Üí tr·∫£ l·ªùi: 
                      ‚ÄúM√¨nh l√† tr·ª£ l√Ω AI c·ªßa n·ªÅn t·∫£ng CocMuaXe, gi√∫p b·∫°n mua b√°n v√† ƒë·∫•u gi√° xe ƒëi·ªán ho·∫∑c pin nhanh ch√≥ng, d·ªÖ d√†ng.‚Äù
                    - Khi ng∆∞·ªùi d√πng h·ªèi ‚Äúl√†m sao ƒë·ªÉ ƒëƒÉng xe?‚Äù ‚Üí tr·∫£ l·ªùi:
                      ‚ÄúB·∫°n ch·ªâ c·∫ßn v√†o trang Seller Dashboard ‚Üí ch·ªçn ‚ÄòƒêƒÉng s·∫£n ph·∫©m m·ªõi‚Äô ‚Üí nh·∫≠p th√¥ng tin xe, h√¨nh ·∫£nh, gi√° ‚Üí g·ª≠i duy·ªát ƒë·ªÉ Staff ki·ªÉm tra.‚Äù
                    - Khi ng∆∞·ªùi d√πng h·ªèi ‚Äúƒë·∫•u gi√° ho·∫°t ƒë·ªông th·∫ø n√†o?‚Äù ‚Üí tr·∫£ l·ªùi:
                      ‚ÄúNg∆∞·ªùi b√°n t·∫°o phi√™n ƒë·∫•u gi√°, ng∆∞·ªùi mua ƒë·∫∑t gi√° trong th·ªùi gian quy ƒë·ªãnh. Khi k·∫øt th√∫c, ng∆∞·ªùi ƒë·∫∑t gi√° cao nh·∫•t s·∫Ω th·∫Øng.‚Äù
                `,
            },
        });
        setChat(chatSession);
    }, []);

    useEffect(() => {
        if (chatWindowRef.current) {
            chatWindowRef.current.scrollTop = chatWindowRef.current.scrollHeight;
        }
    }, [messages]);

    const handleSend = async (e) => {
        e.preventDefault();
        if (!userInput.trim() || isLoading || !chat) return;

        const userMsg = { role: "user", text: userInput };
        setMessages((prev) => [...prev, userMsg]);
        setUserInput("");
        setIsLoading(true);

        try {
            const stream = await chat.sendMessageStream({ message: userInput });

            // Placeholder tin nh·∫Øn c·ªßa AI
            setMessages((prev) => [...prev, { role: "model", text: "" }]);
            let modelResponse = "";

            for await (const chunk of stream) {
                modelResponse += chunk.text;
                setMessages((prev) => {
                    const updated = [...prev];
                    updated[updated.length - 1].text = modelResponse;
                    return updated;
                });
            }
        } catch (err) {
            console.error("Gemini error:", err);
            setMessages((prev) => [
                ...prev,
                { role: "model", text: "‚ùå L·ªói: kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn. Vui l√≤ng th·ª≠ l·∫°i." },
            ]);
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <>
            {/* üîò N√∫t m·ªü chat */}
            {!isOpen && (
                <button
                    onClick={() => setIsOpen(true)}
                    className="fixed bottom-6 right-6 bg-green-600 text-white p-4 rounded-full shadow-lg hover:bg-green-700 transition"
                >
                    <MessageSquare size={26} />
                </button>
            )}

            {/* üí¨ H·ªôp chat */}
            {isOpen && (
                <div className="fixed bottom-6 right-6 w-80 h-[480px] flex flex-col bg-white rounded-2xl shadow-xl border border-gray-200 overflow-hidden">
                    {/* Header */}
                    <div className="flex justify-between items-center bg-green-600 text-white px-4 py-2">
                        <span className="font-semibold">CocMuaXe Assistant</span>
                        <button onClick={() => setIsOpen(false)}>
                            <X size={20} />
                        </button>
                    </div>

                    {/* N·ªôi dung chat */}
                    <div ref={chatWindowRef} className="flex-1 overflow-y-auto p-3 bg-gray-50 text-sm">
                        {messages.map((m, i) => (
                            <div
                                key={i}
                                className={`my-2 flex ${m.role === "user" ? "justify-end" : "justify-start"}`}
                            >
                                <div
                                    className={`px-3 py-2 rounded-xl max-w-[75%] ${m.role === "user"
                                        ? "bg-green-500 text-white"
                                        : "bg-white border border-gray-200"
                                        }`}
                                >
                                    {m.text}
                                </div>
                            </div>
                        ))}
                        {isLoading && (
                            <p className="italic text-gray-400 text-center">üí≠ Gemini ƒëang so·∫°n c√¢u tr·∫£ l·ªùi...</p>
                        )}
                    </div>

                    {/* √î nh·∫≠p */}
                    <form
                        onSubmit={handleSend}
                        className="flex items-center p-2 border-t border-gray-200 bg-white"
                    >
                        <input
                            type="text"
                            value={userInput}
                            onChange={(e) => setUserInput(e.target.value)}
                            placeholder="Nh·∫≠p tin nh·∫Øn..."
                            className="flex-1 text-sm px-3 py-2 border rounded-lg focus:outline-none focus:ring-1 focus:ring-green-400"
                            disabled={isLoading}
                        />
                        <button
                            type="submit"
                            disabled={isLoading || !userInput.trim()}
                            className="ml-2 bg-green-600 hover:bg-green-700 text-white p-2 rounded-full transition"
                        >
                            <Send size={16} />
                        </button>
                    </form>

                    {/* Footer */}
                    <div className="text-center text-[11px] text-gray-400 py-1 bg-gray-50 border-t">
                        ‚ö° Powered by Google Gemini
                    </div>
                </div>
            )}
        </>
    );
}
