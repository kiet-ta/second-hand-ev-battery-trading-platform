const BASE = "https://localhost:7272/api";

export const managerAPI = {
    // ‚úÖ Dashboard Metrics
    getMetrics: async () => {
        const res = await fetch(`${BASE}/ManagerDashboard/metrics`);
        if (!res.ok) throw new Error("Kh√¥ng th·ªÉ t·∫£i metrics");
        return await res.json();
    },

    getRevenueByMonth: async () => {
        const res = await fetch(`${BASE}/ManagerDashboard/revenue-by-month`);
        if (!res.ok) throw new Error("Kh√¥ng th·ªÉ t·∫£i revenue");
        return await res.json();
    },

    getOrdersByMonth: async () => {
        const res = await fetch(`${BASE}/ManagerDashboard/orders-by-month`);
        if (!res.ok) throw new Error("Kh√¥ng th·ªÉ t·∫£i orders");
        return await res.json();
    },

    getProductDistribution: async () => {
        const res = await fetch(`${BASE}/ManagerDashboard/product-distribution`);
        if (!res.ok) throw new Error("Kh√¥ng th·ªÉ t·∫£i distribution");
        return await res.json();
    },

    // ‚úÖ Transactions ‚Äì giao d·ªãch m·ªõi nh·∫•t
    getTransactions: async () => {
        const res = await fetch(`${BASE}/ManagerDashboard/latest`);
        if (!res.ok) throw new Error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch giao d·ªãch m·ªõi nh·∫•t");
        return await res.json();
    },

    // ‚úÖ Seller Approvals ‚Äì danh s√°ch seller ch·ªù duy·ªát
    getPendingSellerApprovals: async () => {
        const res = await fetch(`${BASE}/ManagerDashboard/pending`);
        if (!res.ok) throw new Error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch ch·ªù duy·ªát");
        return await res.json();
    },

    // ‚úÖ Seller Approvals ‚Äì duy·ªát seller
    approveSeller: async (id) => {
        const token = localStorage.getItem("token"); // üîê L·∫•y token JWT ƒë√£ l∆∞u sau khi ƒëƒÉng nh·∫≠p

        const res = await fetch(`${BASE}/ManagerDashboard/${id}/approve`, {
            method: "PATCH",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${token}`, // ‚úÖ G·ª≠i k√®m claim identity
            },
        });

        if (!res.ok) {
            const errText = await res.text();
            throw new Error(`Kh√¥ng th·ªÉ duy·ªát seller: ${errText}`);
        }

        return await res.json();
    },

    // ‚úÖ Seller Approvals ‚Äì t·ª´ ch·ªëi seller
    rejectSeller: async (id) => {
        const res = await fetch(`${BASE}/ManagerDashboard/${id}/reject`, {
            method: "PATCH",
        });
        if (!res.ok) throw new Error("Kh√¥ng th·ªÉ t·ª´ ch·ªëi seller");
        return await res.json();
    },

    // ‚úÖ Users & Products (gi·ªØ nguy√™n)
    getUsers: async () => {
        const res = await fetch(`${BASE}/User`);
        if (!res.ok) throw new Error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch ng∆∞·ªùi d√πng");
        return res.json();
    },

    getProducts: async () => {
        const res = await fetch(`${BASE}/Item`);
        if (!res.ok) throw new Error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch s·∫£n ph·∫©m");
        return res.json();
    },

    getItemWithSeller: async (itemId) => {
        const res = await fetch(`${BASE}/Item/${itemId}/Seller`);
        if (!res.ok) throw new Error(`Kh√¥ng th·ªÉ t·∫£i s·∫£n ph·∫©m ${itemId} c√πng seller`);
        return res.json();
    },

    //set status ng∆∞·ªùi d√πng
    updateUserStatus: async (userId, status) => {
        const token = localStorage.getItem("token");
        let url = "";

        // √°nh x·∫° tr·∫°ng th√°i sang API backend th·ª±c t·∫ø
        if (status === "ban") {
            url = `https://localhost:7272/api/KYC_Document/users/${userId}/ban`;
        } else if (status === "active") {
            url = `https://localhost:7272/api/KYC_Document/users/${userId}/activate`;
        } else if (status === "warning1" || status === "warning2") {
            url = `https://localhost:7272/api/KYC_Document/users/${userId}/warn`;
        } else {
            throw new Error("Invalid status type");
        }

        const res = await fetch(url, {
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${token}`,
            },
        });

        if (!res.ok) {
            const err = await res.text();
            throw new Error(`C·∫≠p nh·∫≠t th·∫•t b·∫°i: ${err}`);
        }

        return await res.json();
    },
    getUsersPaginated: async (page = 1, pageSize = 20) => {
        const token = localStorage.getItem("token");
        const res = await fetch(
            `https://localhost:7272/api/User/all/user/pagination?page=${page}&pageSize=${pageSize}`,
            {
                headers: {
                    Authorization: `Bearer ${token}`,
                    "Content-Type": "application/json",
                },
            }
        );

        if (!res.ok) throw new Error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch user");
        return await res.json();
    },

};
