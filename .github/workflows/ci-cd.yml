name: CI/CD Pipeline - Second-hand EV And Battery Trading Platform

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '22'
  DOCKER_IMAGE_NAME: tak1stprogrammer/backend

jobs:
  # ======================= BACKEND PIPELINE ========================
  backend-build-and-unit-test:
    name: Backend - Build & Unit Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore, Build, and Run Unit Tests
        run: |
          cd BackEnd
          dotnet restore
          # build and test in one line help improve performance
          # --filter "TestCategory!=Integration" for remove integration tests
          dotnet test --no-restore --configuration Release --filter "TestCategory!=Integration"
      
      - name: Publish Backend
        run: cd BackEnd && dotnet publish --no-build --configuration Release --output ../publish

      - name: Upload Backend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-artifacts
          path: publish/
          retention-days: 7

  backend-integration-test:
    name: Backend - Integration Test
    needs: [backend-build-and-unit-test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Run Testcontainers
        run: |
          cd BackEnd
          dotnet test --configuration Release --filter "TestCategory=Integration"

  # ======================= FRONTEND PIPELINE =======================
  frontend-build-test:
    name: Frontend - Build & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'FrontEnd/package-lock.json'
      - run: cd FrontEnd && npm ci
      - run: cd FrontEnd && npm run lint
      - run: cd FrontEnd && npm run build
      - uses: actions/upload-artifact@v4
        with:
          name: frontend-artifacts
          path: FrontEnd/dist/
          retention-days: 7

  # ======================= SECURITY & DEPLOY =======================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [backend-build-and-unit-test, frontend-build-test]
    steps:
      - uses: actions/checkout@v4
      - uses: github/super-linter@v4
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_CSHARP: true
          VALIDATE_JAVASCRIPT_ES: true

  deploy-backend:
    name: Deploy Backend to Docker Hub
    needs: [backend-integration-test, security-scan]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-artifacts
          path: ./publish

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./publish
          push: true
          tags: ${{ env.DOCKER_IMAGE_NAME }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

  deploy-frontend:
    name: Deploy Frontend to Vercel
    needs: [frontend-build-test, security-scan]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-artifacts
          path: ./dist
      
      - name: Install Vercel CLI
        run: npm install -g vercel@latest
        
      - name: Deploy to Vercel
        run: >
          vercel deploy ./dist 
          --prod 
          --token ${{ secrets.VERCEL_TOKEN }} 
          --scope ${{ secrets.VERCEL_ORG_ID }} 
          --name second-hand-ev-battery-trading 
          --yes 
          --build-env NEXT_PUBLIC_API_URL=https://second-hand-ev-and-battery-trading.onrender.com
